import streamlit as st
import os
import google.generativeai as genai

# Gemini API aÃ§arÄ± Ã¼Ã§Ã¼n input (vÉ™ ya secrets.toml ilÉ™)
gemini_api_key = st.text_input("Gemini API Key", type="password")
if not gemini_api_key:
    st.info("ZÉ™hmÉ™t olmasa Gemini API aÃ§arÄ±nÄ±zÄ± É™lavÉ™ edin.", icon="ğŸ”‘")
else:
    genai.configure(api_key=gemini_api_key)

    # BaÅŸlÄ±q vÉ™ info
    st.title("ğŸ’¬ RAG Chatbot (Gemini 1.5 + TXT)")
    st.write(
        "Bu chatbot RAG (Retrieval-Augmented Generation) sistemi ilÉ™ TXT faylÄ±ndan mÉ™lumatlarÄ± istifadÉ™ edir vÉ™ Gemini 1.5 API ilÉ™ cavablar yaradÄ±r."
    )

    # TXT fayl yÃ¼klÉ™
    txt_file = st.file_uploader("TXT faylÄ±nÄ± yÃ¼klÉ™", type=["txt"])
    if txt_file is not None:
        uploaded_text = txt_file.read().decode("utf-8")
        st.success("Fayl uÄŸurla yÃ¼klÉ™ndi!")

        # SadÉ™ retrieval: SualÄ± vÉ™ fayl mÉ™zmununu birlÉ™ÅŸdir
        if "messages" not in st.session_state:
            st.session_state.messages = []

        for message in st.session_state.messages:
            with st.chat_message(message["role"]):
                st.markdown(message["content"])

        if prompt := st.chat_input("SualÄ±nÄ±zÄ± yazÄ±n..."):
            st.session_state.messages.append({"role": "user", "content": prompt})
            with st.chat_message("user"):
                st.markdown(prompt)

            # RAG: SualÄ± vÉ™ sÉ™nÉ™d mÉ™zmununu Gemini modelinÉ™ gÃ¶ndÉ™r
            rag_prompt = f"SÉ™nÉ™d mÉ™zmunu:\n{uploaded_text}\n\nÄ°stifadÉ™Ã§i sualÄ±: {prompt}\nCavab verÉ™rkÉ™n yalnÄ±z sÉ™nÉ™dÉ™ É™saslan!"

            model = genai.GenerativeModel('gemini-1.5-pro-latest')
            response = model.generate_content(rag_prompt)
            answer = response.text

            with st.chat_message("assistant"):
                st.markdown(answer)
            st.session_state.messages.append({"role": "assistant", "content": answer})
    else:
        st.info("ZÉ™hmÉ™t olmasa bir TXT faylÄ± yÃ¼klÉ™yin.", icon="ğŸ“„")
